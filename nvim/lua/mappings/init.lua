vim.g.mapleader = ';'

require("nest").applyKeymaps {
  { "<leader>", {
    { "F", '<cmd>Telescope builtin include_extensions=true<CR>' },
    { "<C-p>", '<cmd>Telescope project<CR>'},
    { "f", '<cmd>Telescope find_files<CR>' },
    { "s", '<cmd>Telescope lsp_document_symbols<CR>' },
    { "S", '<cmd>Telescope lsp_dynamic_workspace_symbols<CR>' },
    { "b", '<cmd>Telescope buffers<CR>' },
    { "/", "<cmd>lua require('telescope').extensions.live_grep_args.live_grep_args()<CR>" },
    { "/", "<cmd>lua require('telescope').extensions.live_grep_args.live_grep_args(<cword>)<CR>", mode = "v" },
    { "d", '<cmd>NvimTreeToggle<CR>' },
    { "D",  {
        { "", '<cmd>TroubleToggle<CR>' },
        { "w", '<cmd>TroubleToggle workspace_diagnostics<CR>' },
        { "d", '<cmd>TroubleToggle document_diagnostics<CR>' },
        { "q", '<cmd>TroubleToggle quickfix<CR>' },
        { "l", '<cmd>TroubleToggle loclist<CR>' },
      },
    },
    { "M", '<cmd>MinimapToggle<CR>' },
    { "c", '<cmd>Telescope commands<CR>' },
    { "n", '<cmd>BufferLineCycleNext<CR>' },
    { "p", '<cmd>BufferLineCyclePrev<CR>' },
    { "P", '<cmd>cprev<CR>' },
    { "N", '<cmd>cnext<CR>' },
    { "g", {
      { "b", '<cmd>Git blame<CR>' },
      { "B", '<cmd>lua require("gitsigns").blame_line{full=true}<CR>' },
      { "s", '<cmd>Git status<CR>' },
      { "S", '<cmd>vertical Git show --patch<CR>' },
      { "a", '<cmd>vertical Git add %<CR>' },
      { "c", '<cmd>vertical Git commit<CR>' },
      { "cc", '<cmd>vertical Git commit -a<CR>' },
      { "C", '<cmd>vertical Git commit --amend --no-edit<CR>' },
      { "CC", '<cmd>vertical Git commit --amend --no-edit -a<CR>' },
      { "f", '<cmd>vertical Git fetch<CR>' },
      { "F", '<cmd>vertical Git fetch --all<CR>' },
      { "p", '<cmd>vertical Git push<CR>' },
      { "P", '<cmd>vertical Git push -f<CR>' },
    }},
    { "<C-b>", '<cmd>Gitsigns toggle_current_line_blame<CR>' },
    { "q", '<cmd>bp | bd # | bn<CR>' },
    { "Q", '<cmd>wincmd q<CR>' },
    { "h", '<cmd>wincmd h<CR>' },
    { "j", '<cmd>wincmd j<CR>' },
    { "k", '<cmd>wincmd k<CR>' },
    { "l", '<cmd>wincmd l<CR>' },
    { "=", '<C-w>=' },
    { "v", '<cmd>vsp<CR><C-w>l' },
    { "V", '<cmd>split<CR><C-w>j' },
    { "r", '<cmd>set number relativenumber!<CR>' },
    { "m", '<cmd>set number!<CR>' },
    { "Z", '<cmd>Lspsaga code_action<CR>' },
    { "<C-Z>", '<cmd>ZenMode<CR>' },
  }},
  { "g", {
    { "p", '<C-o>' },
    { "n", '<C-i>' },
    -- g{t,T} are tab navigation
    { "<C-p>", '<cmd>Lspsaga diagnostic_jump_prev<CR>' },
    { "<C-n>", '<cmd>Lspsaga diagnostic_jump_next<CR>' },
    { "N", '<cmd>tabnew %<CR>' },
    { "Q", '<cmd>tabclose<CR>' },
    { "g", '<cmd>Lspsaga show_buf_diagnostics<CR>' },
    { "d", '<cmd>Lspsaga goto_definition<CR>' },
    { "D", '<cmd>lua vim.lsp.buf.declaration()<CR>' },
    { "y", '<cmd>Lspsaga goto_type_definition<CR>' },
    { "f", '<cmd>Lspsaga lsp_finder<CR>' },
    { "r", '<cmd>Telescope lsp_references<CR>' },
    { "R", '<cmd>Lspsaga rename<CR>' },
    { "i", '<cmd>lua vim.lsp.buf.implementation()<CR>' },
    { "o", '<cmd>Lspsaga outline<CR>' },
  }},
  { "K", '<cmd>lua vim.lsp.buf.hover()<CR>' },
  { "H", '<cmd>Lspsaga show_cursor_diagnostics<CR>' },
}
